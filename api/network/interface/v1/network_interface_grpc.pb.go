// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: api/network/interface/v1/network_interface.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkInterface_Register_FullMethodName          = "/network.interface.v1.NetworkInterface/Register"
	NetworkInterface_Login_FullMethodName             = "/network.interface.v1.NetworkInterface/Login"
	NetworkInterface_Logout_FullMethodName            = "/network.interface.v1.NetworkInterface/Logout"
	NetworkInterface_GetUser_FullMethodName           = "/network.interface.v1.NetworkInterface/GetUser"
	NetworkInterface_AddFollower_FullMethodName       = "/network.interface.v1.NetworkInterface/AddFollower"
	NetworkInterface_ConfirmFriendship_FullMethodName = "/network.interface.v1.NetworkInterface/ConfirmFriendship"
)

// NetworkInterfaceClient is the client API for NetworkInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkInterfaceClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	AddFollower(ctx context.Context, in *AddFollowerReq, opts ...grpc.CallOption) (*AddFollowerReply, error)
	ConfirmFriendship(ctx context.Context, in *ConfirmFriendshipReq, opts ...grpc.CallOption) (*ConfirmFriendshipReply, error)
}

type networkInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkInterfaceClient(cc grpc.ClientConnInterface) NetworkInterfaceClient {
	return &networkInterfaceClient{cc}
}

func (c *networkInterfaceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, NetworkInterface_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, NetworkInterface_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, NetworkInterface_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, NetworkInterface_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddFollower(ctx context.Context, in *AddFollowerReq, opts ...grpc.CallOption) (*AddFollowerReply, error) {
	out := new(AddFollowerReply)
	err := c.cc.Invoke(ctx, NetworkInterface_AddFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ConfirmFriendship(ctx context.Context, in *ConfirmFriendshipReq, opts ...grpc.CallOption) (*ConfirmFriendshipReply, error) {
	out := new(ConfirmFriendshipReply)
	err := c.cc.Invoke(ctx, NetworkInterface_ConfirmFriendship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkInterfaceServer is the server API for NetworkInterface service.
// All implementations must embed UnimplementedNetworkInterfaceServer
// for forward compatibility
type NetworkInterfaceServer interface {
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	AddFollower(context.Context, *AddFollowerReq) (*AddFollowerReply, error)
	ConfirmFriendship(context.Context, *ConfirmFriendshipReq) (*ConfirmFriendshipReply, error)
	mustEmbedUnimplementedNetworkInterfaceServer()
}

// UnimplementedNetworkInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkInterfaceServer struct {
}

func (UnimplementedNetworkInterfaceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNetworkInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedNetworkInterfaceServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedNetworkInterfaceServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedNetworkInterfaceServer) AddFollower(context.Context, *AddFollowerReq) (*AddFollowerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollower not implemented")
}
func (UnimplementedNetworkInterfaceServer) ConfirmFriendship(context.Context, *ConfirmFriendshipReq) (*ConfirmFriendshipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmFriendship not implemented")
}
func (UnimplementedNetworkInterfaceServer) mustEmbedUnimplementedNetworkInterfaceServer() {}

// UnsafeNetworkInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkInterfaceServer will
// result in compilation errors.
type UnsafeNetworkInterfaceServer interface {
	mustEmbedUnimplementedNetworkInterfaceServer()
}

func RegisterNetworkInterfaceServer(s grpc.ServiceRegistrar, srv NetworkInterfaceServer) {
	s.RegisterService(&NetworkInterface_ServiceDesc, srv)
}

func _NetworkInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInterface_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInterface_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInterface_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInterface_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInterface_AddFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddFollower(ctx, req.(*AddFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ConfirmFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmFriendshipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ConfirmFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInterface_ConfirmFriendship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ConfirmFriendship(ctx, req.(*ConfirmFriendshipReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkInterface_ServiceDesc is the grpc.ServiceDesc for NetworkInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.interface.v1.NetworkInterface",
	HandlerType: (*NetworkInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NetworkInterface_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _NetworkInterface_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _NetworkInterface_Logout_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _NetworkInterface_GetUser_Handler,
		},
		{
			MethodName: "AddFollower",
			Handler:    _NetworkInterface_AddFollower_Handler,
		},
		{
			MethodName: "ConfirmFriendship",
			Handler:    _NetworkInterface_ConfirmFriendship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/network/interface/v1/network_interface.proto",
}
